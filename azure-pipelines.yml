# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(BuildID)
  
trigger:
  batch: true
  branches:
    include:
    - master
    - korg

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  - group: maven
  - name: BUILD_NUMBER 
    value: '$(Build.BuildNumber)'
  - name: BUILD_NAME 
    value: '$(Build.DefinitionName)'


steps:
- checkout: self
  persistCredentials: true
  clean: true
- script: mkdir ~/.ssh
- script: ssh-keyscan -p $(deployPort) -H $(deployServer) >> ~/.ssh/known_hosts
- task: Gradle@2
  inputs:
    workingDirectory: 'openpos-assemble'
    options: '-PbuildNumber=$(Build.BuildNumber) -PbuildName=$(Build.DefinitionName) -PgitHash=$(Build.SourceVersion) -PgitBranch=$(Build.SourceBranchName) -PdeployUser=$(deployUser) -PdeployPassword=$(deployPassword) -PdeployUploadUrl=$(deployUploadUrl)'
    gradleWrapperFile: 'openpos-assemble/gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'test deploy generateSourceArtifact'
- task: PublishBuildArtifacts@1
  displayName: 'Publish for downstream pipeline consumption'
  inputs:
    pathtoPublish: 'openpos-assemble/build/openpos-server-core-lib'
    artifactName: 'openpos-server-core-lib'
- task: NodeTool@0
  inputs:
    versionSpec: '8.x'
  displayName: 'Install Node.js'  
- task: npmAuthenticate@0
  inputs:
    workingFile: '.npmrc'
    customEndpoint: 'npm'  
- script: |
    npm install -g @angular/cli@7.3.9
    npm install scss-bundle -g
    npm install        
  displayName: 'Install'
  continueOnError: false
  failOnStderr: false  
  workingDirectory: 'openpos-client-libs'
- script: |
    ng test openpos-client-core-lib
  displayName: 'Test'    
  continueOnError: true
  failOnStderr: false
  workingDirectory: 'openpos-client-libs'
- task: PublishTestResults@2
  displayName: 'Publish Test Results'    
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: '**/TESTS.xml' 
    #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
    #mergeTestResults: false # Optional
    failTaskOnFailedTests: true # Optional
    #testRunTitle: # Optional
    #buildPlatform: # Optional
    #buildConfiguration: # Optional
    #publishRunAttachments: true # Optional          
- script: |    
    ng build openpos-client-core-lib
    scss-bundle -c projects/openpos-client-core-lib/scss-bundle.config.json
  displayName: 'Build'
  continueOnError: false
  failOnStderr: false
  workingDirectory: 'openpos-client-libs'
- script: |
    npm install -g publish-if-not-published
    cp .npmrc dist/openpos-client-core-lib
    cd dist/openpos-client-core-lib
    publish-if-not-published
    npm pack
    mv jumpmind-openpos-client-core-lib-*.tgz jumpmind-openpos-client-core-lib-snapshot.tgz
  displayName: 'Publish if not already published'
  workingDirectory: 'openpos-client-libs'
  
- task: PublishBuildArtifacts@1
  displayName: 'Publish for downstream pipeline consumption'
  inputs:
    pathtoPublish: 'openpos-client-libs/dist/openpos-client-core-lib/jumpmind-openpos-client-core-lib-snapshot.tgz' 
    #artifactName: 'drop' 
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional    
- task: CopyFilesOverSSH@0
  displayName: 'Upload tar dist to maven.jumpmind.com'  
  inputs:
    sshEndpoint: maven.jumpmind.com
    #sourceFolder: # Optional
    contents: '**/jumpmind-openpos-client-core-lib-snapshot.tgz' 
    targetFolder: 'www/npm' # Optional
    cleanTargetFolder: true # Optional
    overwrite: true # Optional
    failOnEmptySource: true # Optional
    flattenFolders: true # Optional    
    #publishRunAttachments: true # Optional       
