group = 'org.jumpmind.pos'

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility=1.8
targetCompatibility=1.8

ext {
    jnaVersion = '4.1.0'
    springfoxSwaggerVersion='2.9.2'
    javaposVersion='1.14.2'
    slf4jVersion='1.7.25'
    log4jVersion='1.2.17'
    jacksonVersion='2.8.10'
}

processResources {
    eachFile { details ->
        if (details.name.endsWith('version.properties')) {
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'version': appVersion,
                    'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
                    'gitBranch' : gitBranch,
                    'gitHash' : gitHash,
                    'buildNumber' : buildNumber,
                    'buildName' : buildName
                ])
        }
    }
}


repositories { 
    maven {
        jcenter()
        mavenCentral()
        url symmetricMavenUrl 
    } 
}

idea {

    module {
        resourceDirs += file('src/test/resources')

        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }

    project {
        resourceFilter {
            appliesTo = 'FILES_AND_FOLDERS'
            type = 'EXCLUDE_ALL'
            matcher {
                id = 'org.eclipse.ui.ide.orFilterMatcher'
                //               matcher {
                //                 id = 'org.eclipse.ui.ide.multiFilter'
                //                 arguments = '1.0-projectRelativePath-matches-false-false-bin'
                //               }
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-projectRelativePath-matches-false-false-build'
                }
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-name-matches-false-false-*.class'
                }
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-name-matches-false-false-node_modules'
                }
            }
        }        
    }
}

test {
    // ignoreFailures = true
    testLogging.showStandardStreams = true

    //Dynamic exclude through property defined in the build.gradle file
    if (project.hasProperty('excludeTests')) {
        println('Excluding tests: ' + project.property('excludeTests'));
        exclude project.property('excludeTests')
    }
}

task testJar(type: Jar) {
    classifier "test"
    from  sourceSets.test.output+sourceSets.test.allSource
}

task develop {
    description 'Generates Eclipse artifacts and sets up your development environment'
    dependsOn tasks.cleanEclipse, tasks.eclipse, tasks.cleanIdea, tasks.idea
    doFirst {
        println "Removing bin and .settings directories"
        delete "./bin"
        delete '.settings'
    }
}

configurations { testArtifacts }

artifacts {  testArtifacts testJar  }

